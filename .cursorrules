# Angular 20 Project - Bilaterals Client

## 🚀 Project Specifications

### **Framework and Version**
- **Angular 20** (released May 2025)
- **TypeScript 5.8+**
- **Node.js ≥ 20.11.1**
- **Standalone Components** by default

### **Testing Framework**
- **Jest** as main testing framework
- **Modern configuration** with jest-preset-angular
- **DO NOT use Karma** (completely removed)
- Run tests with: `npm test`, `npm run test:watch`, `npm run test:coverage`

### **Linting and Code Quality**
- **ESLint v9** with flat config (eslint.config.js)
- **angular-eslint v20.1.1** (latest)
- **typescript-eslint v8** 
- **Prettier** for automatic formatting
- Strict configuration for code quality
- Run: `npm run lint`, `npm run format`, `npm run code-quality`

## 🆕 Angular 20 (2025) New Features to Leverage

### **1. Standalone Components by Default**
```typescript
// ✅ New style (Angular 20)
@Component({
  selector: 'app-example',
  standalone: true,
  imports: [CommonModule, RouterModule],
  template: `...`
})
export class ExampleComponent {}
```

### **2. Stable Signals API**
```typescript
// ✅ Use signals for reactive state
const count = signal(0);
const doubled = computed(() => count() * 2);

// ✅ In components
export class CounterComponent {
  count = signal(0);
  increment() {
    this.count.update(c => c + 1);
  }
}
```

### **3. Modern Control Flow Syntax**
```html
<!-- ✅ New Angular 20 syntax -->
@if (user) {
  <p>Welcome {{ user.name }}!</p>
} @else {
  <p>Please log in</p>
}

@for (item of items; track item.id) {
  <div>{{ item.name }}</div>
}
```

### **4. Signal-Based Forms (Beta)**
```typescript
// ✅ New reactive APIs
const userForm = formSignal({
  name: '',
  email: ''
});
```

### **5. Zoneless Change Detection (Preview)**
```typescript
// ✅ Optional: without Zone.js for better performance
import { provideZonelessChangeDetection } from '@angular/core';

bootstrapApplication(AppComponent, {
  providers: [provideZonelessChangeDetection()]
});
```

### **6. Resource API for Async Data**
```typescript
// ✅ Modern async data handling
const userResource = resource({
  request: userId,
  loader: ({ request }) => fetchUser(request)
});
```

## 🔧 Development Guidelines

### **Recommended Architecture**
- Use **standalone components** for new functionality
- Implement **signals** for reactive state
- Leverage **control flow syntax** in templates
- Use **inject()** instead of constructor injection

### **Testing with Jest**
- Write unit tests for all components
- Use mocks for external services
- Maintain code coverage > 80%
- Run tests in watch mode during development

### **Code Standards**
- **ESLint** must pass without errors
- Use **TypeScript strict mode**
- Implement **OnPush** change detection when possible
- Follow updated **Angular Style Guide**

### **Mandatory ESLint Rules**
```typescript
// ✅ MANDATORY - Angular 20 Specific
@angular-eslint/prefer-standalone: 'warn'        // Standalone components
@angular-eslint/prefer-signals: 'warn'           // Use signals
@angular-eslint/prefer-inject: 'error'           // inject() vs constructor
@angular-eslint/prefer-on-push-component-change-detection: 'warn'

// ✅ MANDATORY - Naming conventions
@angular-eslint/component-selector: prefix 'app', kebab-case
@angular-eslint/directive-selector: prefix 'app', camelCase

// ✅ MANDATORY - Templates
@angular-eslint/template/prefer-control-flow: 'warn'  // @if, @for syntax
@angular-eslint/template/use-track-by-function: 'warn'

// ✅ MANDATORY - TypeScript
@typescript-eslint/prefer-nullish-coalescing: 'error'  // ?? operator
@typescript-eslint/prefer-optional-chain: 'error'     // ?. operator
@typescript-eslint/prefer-readonly: 'warn'            // readonly properties

// ✅ MANDATORY - Code Quality
'no-console': ['error', { allow: ['warn', 'error'] }] // No console.log allowed
'no-debugger': 'error'                                // No debugger statements
'prefer-const': 'error'                               // Use const when possible
```

## 🌐 Internet Research Guidelines

### **🚨 CRITICAL RULE: Always Validate on Internet Before Implementation**
- ✅ **MANDATORY**: Search internet BEFORE any installation
- ✅ Verify compatibility with Angular 20 (July 2025)
- ✅ Confirm it's NOT deprecated or in sunset
- ✅ Look for newer versions available
- ✅ Review breaking changes in changelogs
- ✅ Validate with searches like: "package-name Angular 20 2025"
- ❌ **NEVER** install without verifying on internet first

### **Reliable Sources to Consult**
1. **angular.dev** - Official documentation
2. **npmjs.com** - Package versions
3. **github.com/angular-eslint** - ESLint for Angular
4. **typescript-eslint.io** - TypeScript ESLint
5. **jestjs.io** - Jest documentation

### **Search Keywords**
- "Angular 20" + current date
- "angular-eslint v20" + "flat config"
- "Jest Angular 20" + current year
- "typescript-eslint v8" + "2025"

## 🚫 Avoid Deprecated Technologies

### **DO NOT Use:**
- ❌ Karma (testing)
- ❌ Protractor (e2e testing)
- ❌ NgModules for new functionality
- ❌ ESLint legacy config (.eslintrc.json)
- ❌ Constructor injection (prefer inject())
- ❌ Classic FormControl/FormGroup

### **Required Migrations:**
- Karma → Jest ✅ (completed)
- .eslintrc.json → eslint.config.js (pending)
- NgModules → Standalone Components (when possible)

## 📝 Implementation Notes

### **Available Commands**
```bash
npm start                 # Development server
npm test                  # Jest tests
npm run test:watch        # Jest in watch mode
npm run test:coverage     # Tests with coverage
npm run build            # Production build
npm run lint             # ESLint checking
```

### **Testing Structure**
- Use TestBed for components
- Mocks with jest.fn()
- Spy with jest.spyOn()
- Setup in setup-jest.ts

### **Angular 20 Performance Tips**
- OnPush change detection
- Lazy loading with loadComponent()
- Signals for reactive state
- Resource API for data
- Zoneless when appropriate

---
*Last updated: July 2025 - Angular 20.x - Always check for newer versions* 